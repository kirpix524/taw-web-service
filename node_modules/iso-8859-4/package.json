{
  "_args": [
    [
      {
        "raw": "iso-8859-4@^0.1.2",
        "scope": null,
        "escapedName": "iso-8859-4",
        "name": "iso-8859-4",
        "rawSpec": "^0.1.2",
        "spec": ">=0.1.2 <0.2.0",
        "type": "range"
      },
      "/home/surovcevnv/common/git/taw-web-service/node_modules/legacy-encoding"
    ]
  ],
  "_from": "iso-8859-4@>=0.1.2 <0.2.0",
  "_id": "iso-8859-4@0.1.2",
  "_inCache": true,
  "_location": "/iso-8859-4",
  "_npmUser": {
    "name": "mathias",
    "email": "mathias@qiwi.be"
  },
  "_npmVersion": "1.4.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "iso-8859-4@^0.1.2",
    "scope": null,
    "escapedName": "iso-8859-4",
    "name": "iso-8859-4",
    "rawSpec": "^0.1.2",
    "spec": ">=0.1.2 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/legacy-encoding"
  ],
  "_resolved": "https://registry.npmjs.org/iso-8859-4/-/iso-8859-4-0.1.2.tgz",
  "_shasum": "6ccdc4fd446ad9fd2e0cf3174e7bbd1f585ac3e6",
  "_shrinkwrap": null,
  "_spec": "iso-8859-4@^0.1.2",
  "_where": "/home/surovcevnv/common/git/taw-web-service/node_modules/legacy-encoding",
  "author": {
    "name": "Mathias Bynens",
    "url": "http://mathiasbynens.be/"
  },
  "bugs": {
    "url": "https://github.com/mathiasbynens/iso-8859-4/issues"
  },
  "dependencies": {},
  "description": "A robust iso-8859-4 encoder/decoder written in JavaScript.",
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-shell": "~0.7.0",
    "grunt-template": "~0.2.3",
    "istanbul": "~0.2.7",
    "jsesc": "~0.4.3",
    "qunit-extras": "~1.1.0",
    "qunitjs": "~1.11.0",
    "requirejs": "~2.1.11",
    "string.fromcodepoint": "~0.2.0"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "6ccdc4fd446ad9fd2e0cf3174e7bbd1f585ac3e6",
    "tarball": "https://registry.npmjs.org/iso-8859-4/-/iso-8859-4-0.1.2.tgz"
  },
  "files": [
    "LICENSE-MIT.txt",
    "iso-8859-4.js"
  ],
  "homepage": "http://mths.be/iso-8859-4",
  "keywords": [
    "codec",
    "decoder",
    "decoding",
    "encoder",
    "encoding",
    "legacy",
    "legacy-encoding",
    "csisolatin4",
    "iso-8859-4",
    "iso-ir-110",
    "iso8859-4",
    "iso88594",
    "iso_8859-4",
    "iso_8859-4:1988",
    "l4",
    "latin4"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://mths.be/mit"
    }
  ],
  "main": "iso-8859-4.js",
  "maintainers": [
    {
      "name": "mathias",
      "email": "mathias@qiwi.be"
    }
  ],
  "name": "iso-8859-4",
  "optionalDependencies": {},
  "readme": "# iso-8859-4 [![Build status](https://travis-ci.org/mathiasbynens/iso-8859-4.svg?branch=master)](https://travis-ci.org/mathiasbynens/iso-8859-4) [![Dependency status](https://gemnasium.com/mathiasbynens/iso-8859-4.svg)](https://gemnasium.com/mathiasbynens/iso-8859-4)\n\n_iso-8859-4_ is a robust JavaScript implementation of [the iso-8859-4 character encoding as defined by the Encoding Standard](http://encoding.spec.whatwg.org/#iso-8859-4).\n\nThis encoding is known under the following names: csisolatin4, iso-8859-4, iso-ir-110, iso8859-4, iso88594, iso_8859-4, iso_8859-4:1988, l4, and latin4.\n\n## Installation\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install iso-8859-4\n```\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install iso-8859-4\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/iso-8859-4\n```\n\nIn a browser:\n\n```html\n<script src=\"iso-8859-4.js\"></script>\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar iso88594 = require('iso-8859-4');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('iso88594.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'iso-8859-4': 'path/to/iso-8859-4'\n    }\n  },\n  ['iso-8859-4'],\n  function(iso88594) {\n    console.log(iso88594);\n  }\n);\n```\n\n## API\n\n### `iso88594.version`\n\nA string representing the semantic version number.\n\n### `iso88594.labels`\n\nAn array of strings, each representing a [label](http://encoding.spec.whatwg.org/#label) for this encoding.\n\n### `iso88594.encode(input, options)`\n\nThis function takes a plain text string (the `input` parameter) and encodes it according to iso-8859-4. The return value is a ‘byte string’, i.e. a string of which each item represents an octet as per iso-8859-4.\n\n```js\nvar encodedData = iso88594.encode(text);\n```\n\nThe optional `options` object and its `mode` property can be used to set the [error mode](http://encoding.spec.whatwg.org/#error-mode). For encoding, the error mode can be `'fatal'` (the default) or `'html'`.\n\n```js\nvar encodedData = iso88594.encode(text, {\n  'mode': 'html'\n});\n// If `text` contains a symbol that cannot be represented in iso-8859-4,\n// instead of throwing an error, it will return an HTML entity for the symbol.\n```\n\n### `iso88594.decode(input, options)`\n\nThis function takes a byte string (the `input` parameter) and decodes it according to iso-8859-4.\n\n```js\nvar text = iso88594.decode(encodedData);\n```\n\nThe optional `options` object and its `mode` property can be used to set the [error mode](http://encoding.spec.whatwg.org/#error-mode). For decoding, the error mode can be `'replacement'` (the default) or `'fatal'`.\n\n```js\nvar text = iso88594.decode(encodedData, {\n  'mode': 'fatal'\n});\n// If `encodedData` contains an invalid byte for the iso-8859-4 encoding,\n// instead of replacing it with U+FFFD in the output, an error is thrown.\n```\n\n## Support\n\n_iso-8859-4_ is designed to work in at least Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, Rhino 1.7RC4, as well as old and modern versions of Chrome, Firefox, Safari, Opera, and Internet Explorer.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that’s done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate the code coverage report, use `grunt cover`.\n\n## Notes\n\n[Similar modules for other single-byte legacy encodings are available.](https://www.npmjs.org/browse/keyword/legacy-encoding)\n\n## Author\n\n| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\n_iso-8859-4_ is available under the [MIT](http://mths.be/mit) license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mathiasbynens/iso-8859-4.git"
  },
  "scripts": {
    "test": "node tests/tests.js"
  },
  "version": "0.1.2"
}
